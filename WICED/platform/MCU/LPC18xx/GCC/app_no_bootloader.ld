/* * Copyright 2015, Broadcom Corporation
 * All Rights Reserved.
 *
 * This is UNPUBLISHED PROPRIETARY SOURCE CODE of Broadcom Corporation;
 * the contents of this file may not be disclosed to third parties, copied
 * or duplicated in any form, in whole or in part, without the prior
 * written permission of Broadcom Corporation. */reset_handler = _start;ENTRY( _start );    /* Include memory map */INCLUDE memory_no_bootloader.ldSECTIONS{    .vectors :    {                   link_interrupt_vectors_location = .;              KEEP(*(*.interrupt_vector_table))    }>APP_CODE_A  AT> APP_CODE_A                                         .crp_code_segment_a :    {                KEEP(*(*.crp_bank_a))    }>CODE_READ_PROTECTION_A  AT> CODE_READ_PROTECTION_A                           .crp_code_segment_b :    {                KEEP(*(*.crp_bank_b))    }>CODE_READ_PROTECTION_B  AT> CODE_READ_PROTECTION_B                                                      .text :    {                link_code_location = ALIGN(.,4);        KEEP(*(.text.irq ))        *(.text .text.* .gnu.linkonce.t.*)        link_code_end = .;        . = ALIGN(0x4);        link_const_variable_data_location = .;        *(.rodata .rodata.* .gnu.linkonce.r.*)        link_const_variable_data_end = .;        . = ALIGN(0x4);        link_constructors_location = .;                KEEP(*(.preinit_array))        KEEP(*(.init_array))        KEEP (*crtbegin.o(.ctors))        KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))        KEEP (*(SORT(.ctors.*)))        KEEP (*crtend.o(.ctors))        link_constructors_end = .;        . = ALIGN(0x4);        link_destructors_location = .;        KEEP (*crtbegin.o(.dtors))        KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))        KEEP (*(SORT(.dtors.*)))        KEEP (*crtend.o(.dtors))        link_destructors_end = .;        . = ALIGN(16);    }>APP_CODE_A  AT> APP_CODE_A OVERFLOW_INTO> .app_code_b    /*     * The .ARM.exidx and .ARM.extab sections are used for C++ exception handling.     * It is located here for completeness. Bare-metal ARM projects     * typically cannot afford the overhead associated with C++     * exceptions handling.     */    .ARM.exidx :    {        __exidx_start = ALIGN(4);        *(.ARM.exidx* .gnu.linkonce.armexidx.*)        __exidx_end = .;    }>APP_CODE_A  AT> APP_CODE_A OVERFLOW_INTO> .app_code_b    /*    .crp_code_segment_b :    {                . = 0x2FC - ADDR(.vectors);        KEEP(*(*.crp))    }>APP_CODE_A  AT> APP_CODE_A*/                 .ARM.extab :    {        __extab_start = ALIGN(4);        *(.ARM.extab*)        __extab_end = .;    } >APP_CODE_A  AT> APP_CODE_A OVERFLOW_INTO> .app_code_b    .fast : /* This section contains code that is run from RAM after being loaded from flash - functions can be put in this section with the C attribute: __attribute__ ((section (".fast"))) */    {        link_run_from_ram_code_flash_location = LOADADDR( .fast ); /* This is the location in flash of the code */        link_run_from_ram_code_ram_location = .;        *(.fast .fast.* .text.fastcode)        link_run_from_ram_code_ram_end = .;    }> SRAM_FAST AT> APP_CODE_A OVERFLOW_INTO> .app_code_b    .data : /* Contains the non-zero initialised global variables */    {            . = ALIGN(., 4);           link_global_data_initial_values = LOADADDR( .data ); /* This is the location in flash of the initial values of global variables */        link_global_data_start = .;        *(.data*)        link_global_data_end = .;        . = ALIGN(., 4);    }> SRAM_DATA AT> APP_CODE_A OVERFLOW_INTO> .app_code_b    .bss : /* Zero initialised memory used for zero initialised variables */    {        link_bss_location = ALIGN(., 4);        *(.bss*)        *(COMMON)        link_bss_end = .;        . = ALIGN(., 4);    }> SRAM_STACK AT> SRAM_STACK        .stack : /* Contains the initial stack */    {        link_stack_location = ALIGN(., 4);        *(.stack)        . = ALIGN(MAX(link_stack_location + __STACKSIZE__ , .), 4);        link_stack_end = .;    }> SRAM_STACK AT> SRAM_STACK    /DISCARD/ :    {        *(.ARM.attributes*)        *(.comment)        *(.init)        *(.preinit)        *(.fini)        *(.fini_array)        *(.ARM.exidx*)        *(.gnu.linkonce.armexidx.*)        *(.eh_frame_hdr)        *(.eh_frame)        *(.gnu.linkonce.armextab.*)        *(.v4_bx)        *(.vfp11_veneer)        *(.gcc_except_table)        *(.eh_frame_hdr)        *(.eh_frame)        *(.glue*)    }}/* Declare libc Heap to start at end of allocated RAM */PROVIDE( _heap = link_stack_end );/* End of the heap is top of RAM, aligned 8 byte *//*PROVIDE( _eheap = ALIGN( ORIGIN( SRAM_FAST ) + LENGTH( SRAM_FAST ) + LENGTH( SRAM_DATA ) + LENGTH( SRAM_STACK ) + LENGTH( SRAM_STACK )- 8, 8 ) );*/PROVIDE( _eheap = ALIGN( ORIGIN( SRAM_STACK )+LENGTH( SRAM_STACK )- 8, 8 ) );/* ThreadX aliases */PROVIDE( __RAM_segment_used_end__ = link_stack_end );PROVIDE( __tx_free_memory_start = link_stack_end );PROVIDE( __tx_vectors = link_interrupt_vectors_location );